/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package tripbooker.presentation.view;

import java.util.ArrayList;
import java.util.List;
import tripbooker.dto.bean.airport.IAirportBean;
import tripbooker.dto.bean.city.ICityBean;
import tripbooker.dto.bean.country.ICountryBean;
import tripbooker.logic.facade.factory.FacadeFactory;
import tripbooker.presentation.controller.event.GUIEvent;

/**
 *
 * @author Pablo Albaladejo Mestre <pablo.albaladejo.mestre@gmail.com>
 */
public class TripBookerGUIImp extends TripBookerGUI {

    /**
     * Creates new form TripBookerGUIImp
     */
    public TripBookerGUIImp() {
        initComponents();
        this.update(GUIEvent.LOAD_DEPARTURE_COUNTRY, null);
        this.update(GUIEvent.LOAD_DEPARTURE_CITY, DepartureCountryComboBox.getSelectedItem().toString());
        this.update(GUIEvent.LOAD_DEPARTURE_AIRPORT, DepartureCityComboBox.getSelectedItem().toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DepartureCountryComboBox = new javax.swing.JComboBox();
        DestinationCountryComboBox = new javax.swing.JComboBox();
        DepartureCityComboBox = new javax.swing.JComboBox();
        DepartureAirportComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DepartureCountryComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DepartureCountryComboBoxItemStateChanged(evt);
            }
        });

        DepartureCityComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DepartureCityComboBoxItemStateChanged(evt);
            }
        });

        DepartureAirportComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DepartureAirportComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(DepartureCountryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DepartureCityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DepartureAirportComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(DestinationCountryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DepartureCountryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DestinationCountryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DepartureCityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DepartureAirportComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(241, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DepartureCountryComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DepartureCountryComboBoxItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) {
            this.update(GUIEvent.LOAD_DEPARTURE_CITY, DepartureCountryComboBox.getSelectedItem().toString());
        }
    }//GEN-LAST:event_DepartureCountryComboBoxItemStateChanged

    private void DepartureCityComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DepartureCityComboBoxItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) {
            this.update(GUIEvent.LOAD_DEPARTURE_AIRPORT, DepartureCityComboBox.getSelectedItem().toString());
        }
    }//GEN-LAST:event_DepartureCityComboBoxItemStateChanged

    private void DepartureAirportComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DepartureAirportComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_DepartureAirportComboBoxItemStateChanged

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox DepartureAirportComboBox;
    private javax.swing.JComboBox DepartureCityComboBox;
    private javax.swing.JComboBox DepartureCountryComboBox;
    private javax.swing.JComboBox DestinationCountryComboBox;
    // End of variables declaration//GEN-END:variables

    private void loadComboBox(javax.swing.JComboBox ComboBox, String[] stringList){
        ComboBox.setModel(new javax.swing.DefaultComboBoxModel(stringList));
        ComboBox.setSelectedIndex(0);
    }
    private void loadDepartureCountries(){
        List<ICountryBean> countryList = FacadeFactory.getInstance().getUserFacade().getAllCountries();
        ArrayList<String> countries = new ArrayList();
        for(ICountryBean country : countryList){
            countries.add(country.getName());
        }
        String[] stringList = new String[countries.size()];
        countries.toArray(stringList);
        loadComboBox(DepartureCountryComboBox, stringList);
    }
    private void loadDepartureCities(String name){
        ICountryBean countryBean = FacadeFactory.getInstance().getUserFacade().getCountryByName(name);
        List<ICityBean> cityList = FacadeFactory.getInstance().getUserFacade().getAllCitiesByCountry(countryBean.getCode());
        ArrayList<String> cities = new ArrayList();
        for(ICityBean cityBean : cityList){
            cities.add(cityBean.getName());
        }
        String[] stringList = new String[cityList.size()];
        cities.toArray(stringList);
        loadComboBox(DepartureCityComboBox, stringList);
    }
    private void loadDepartureAirports(String name){
        ICityBean cityBean = FacadeFactory.getInstance().getUserFacade().getCityByName(name);
        List<IAirportBean> airportList = FacadeFactory.getInstance().getUserFacade().getAllAirportsByCity(cityBean.getCode());
        ArrayList<String> airports = new ArrayList();
        for(IAirportBean airportBean : airportList){
            airports.add(airportBean.getCode());
        }
        String[] stringList = new String[airportList.size()];
        airports.toArray(stringList);
        loadComboBox(DepartureAirportComboBox, stringList);
    }
    
    private void loadDestinationCountries(){
        List<ICountryBean> countryList = FacadeFactory.getInstance().getUserFacade().getAllCountries();
    }
    
    @Override
    public void update(int event, Object data) {
        switch(event){
            case GUIEvent.LOAD_DEPARTURE_COUNTRY:
                loadDepartureCountries();
                break;
            case GUIEvent.LOAD_DEPARTURE_CITY:
                loadDepartureCities((String)data);
                break;
            case GUIEvent.LOAD_DEPARTURE_AIRPORT:
                loadDepartureAirports((String)data);
                break;
            case GUIEvent.LOAD_DESTINATION_COUNTRY:
                loadDestinationCountries();
                break;
            default:
                break;
        }
    }
}
